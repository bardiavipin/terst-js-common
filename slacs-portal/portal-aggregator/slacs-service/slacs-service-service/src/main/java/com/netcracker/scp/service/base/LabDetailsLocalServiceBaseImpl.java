/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.netcracker.scp.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import com.netcracker.scp.model.LabDetails;
import com.netcracker.scp.service.LabDetailsLocalService;
import com.netcracker.scp.service.persistence.EventsPersistence;
import com.netcracker.scp.service.persistence.LabDetailsPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the lab details local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.netcracker.scp.service.impl.LabDetailsLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.netcracker.scp.service.impl.LabDetailsLocalServiceImpl
 * @see com.netcracker.scp.service.LabDetailsLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class LabDetailsLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements LabDetailsLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.netcracker.scp.service.LabDetailsLocalServiceUtil} to access the lab details local service.
	 */

	/**
	 * Adds the lab details to the database. Also notifies the appropriate model listeners.
	 *
	 * @param labDetails the lab details
	 * @return the lab details that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public LabDetails addLabDetails(LabDetails labDetails) {
		labDetails.setNew(true);

		return labDetailsPersistence.update(labDetails);
	}

	/**
	 * Creates a new lab details with the primary key. Does not add the lab details to the database.
	 *
	 * @param labId the primary key for the new lab details
	 * @return the new lab details
	 */
	@Override
	public LabDetails createLabDetails(long labId) {
		return labDetailsPersistence.create(labId);
	}

	/**
	 * Deletes the lab details with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param labId the primary key of the lab details
	 * @return the lab details that was removed
	 * @throws PortalException if a lab details with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public LabDetails deleteLabDetails(long labId) throws PortalException {
		return labDetailsPersistence.remove(labId);
	}

	/**
	 * Deletes the lab details from the database. Also notifies the appropriate model listeners.
	 *
	 * @param labDetails the lab details
	 * @return the lab details that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public LabDetails deleteLabDetails(LabDetails labDetails) {
		return labDetailsPersistence.remove(labDetails);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(LabDetails.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return labDetailsPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.netcracker.scp.model.impl.LabDetailsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return labDetailsPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.netcracker.scp.model.impl.LabDetailsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return labDetailsPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return labDetailsPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return labDetailsPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public LabDetails fetchLabDetails(long labId) {
		return labDetailsPersistence.fetchByPrimaryKey(labId);
	}

	/**
	 * Returns the lab details matching the UUID and group.
	 *
	 * @param uuid the lab details's UUID
	 * @param groupId the primary key of the group
	 * @return the matching lab details, or <code>null</code> if a matching lab details could not be found
	 */
	@Override
	public LabDetails fetchLabDetailsByUuidAndGroupId(String uuid, long groupId) {
		return labDetailsPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the lab details with the primary key.
	 *
	 * @param labId the primary key of the lab details
	 * @return the lab details
	 * @throws PortalException if a lab details with the primary key could not be found
	 */
	@Override
	public LabDetails getLabDetails(long labId) throws PortalException {
		return labDetailsPersistence.findByPrimaryKey(labId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(labDetailsLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(LabDetails.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("labId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(labDetailsLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(LabDetails.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("labId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(labDetailsLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(LabDetails.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("labId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<LabDetails>() {
				@Override
				public void performAction(LabDetails labDetails)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						labDetails);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(LabDetails.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return labDetailsLocalService.deleteLabDetails((LabDetails)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return labDetailsPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the lab detailses matching the UUID and company.
	 *
	 * @param uuid the UUID of the lab detailses
	 * @param companyId the primary key of the company
	 * @return the matching lab detailses, or an empty list if no matches were found
	 */
	@Override
	public List<LabDetails> getLabDetailsesByUuidAndCompanyId(String uuid,
		long companyId) {
		return labDetailsPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of lab detailses matching the UUID and company.
	 *
	 * @param uuid the UUID of the lab detailses
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of lab detailses
	 * @param end the upper bound of the range of lab detailses (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching lab detailses, or an empty list if no matches were found
	 */
	@Override
	public List<LabDetails> getLabDetailsesByUuidAndCompanyId(String uuid,
		long companyId, int start, int end,
		OrderByComparator<LabDetails> orderByComparator) {
		return labDetailsPersistence.findByUuid_C(uuid, companyId, start, end,
			orderByComparator);
	}

	/**
	 * Returns the lab details matching the UUID and group.
	 *
	 * @param uuid the lab details's UUID
	 * @param groupId the primary key of the group
	 * @return the matching lab details
	 * @throws PortalException if a matching lab details could not be found
	 */
	@Override
	public LabDetails getLabDetailsByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {
		return labDetailsPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the lab detailses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.netcracker.scp.model.impl.LabDetailsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of lab detailses
	 * @param end the upper bound of the range of lab detailses (not inclusive)
	 * @return the range of lab detailses
	 */
	@Override
	public List<LabDetails> getLabDetailses(int start, int end) {
		return labDetailsPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of lab detailses.
	 *
	 * @return the number of lab detailses
	 */
	@Override
	public int getLabDetailsesCount() {
		return labDetailsPersistence.countAll();
	}

	/**
	 * Updates the lab details in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param labDetails the lab details
	 * @return the lab details that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public LabDetails updateLabDetails(LabDetails labDetails) {
		return labDetailsPersistence.update(labDetails);
	}

	/**
	 * Returns the events local service.
	 *
	 * @return the events local service
	 */
	public com.netcracker.scp.service.EventsLocalService getEventsLocalService() {
		return eventsLocalService;
	}

	/**
	 * Sets the events local service.
	 *
	 * @param eventsLocalService the events local service
	 */
	public void setEventsLocalService(
		com.netcracker.scp.service.EventsLocalService eventsLocalService) {
		this.eventsLocalService = eventsLocalService;
	}

	/**
	 * Returns the events persistence.
	 *
	 * @return the events persistence
	 */
	public EventsPersistence getEventsPersistence() {
		return eventsPersistence;
	}

	/**
	 * Sets the events persistence.
	 *
	 * @param eventsPersistence the events persistence
	 */
	public void setEventsPersistence(EventsPersistence eventsPersistence) {
		this.eventsPersistence = eventsPersistence;
	}

	/**
	 * Returns the lab details local service.
	 *
	 * @return the lab details local service
	 */
	public LabDetailsLocalService getLabDetailsLocalService() {
		return labDetailsLocalService;
	}

	/**
	 * Sets the lab details local service.
	 *
	 * @param labDetailsLocalService the lab details local service
	 */
	public void setLabDetailsLocalService(
		LabDetailsLocalService labDetailsLocalService) {
		this.labDetailsLocalService = labDetailsLocalService;
	}

	/**
	 * Returns the lab details persistence.
	 *
	 * @return the lab details persistence
	 */
	public LabDetailsPersistence getLabDetailsPersistence() {
		return labDetailsPersistence;
	}

	/**
	 * Sets the lab details persistence.
	 *
	 * @param labDetailsPersistence the lab details persistence
	 */
	public void setLabDetailsPersistence(
		LabDetailsPersistence labDetailsPersistence) {
		this.labDetailsPersistence = labDetailsPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.netcracker.scp.model.LabDetails",
			labDetailsLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.netcracker.scp.model.LabDetails");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return LabDetailsLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return LabDetails.class;
	}

	protected String getModelClassName() {
		return LabDetails.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = labDetailsPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.netcracker.scp.service.EventsLocalService.class)
	protected com.netcracker.scp.service.EventsLocalService eventsLocalService;
	@BeanReference(type = EventsPersistence.class)
	protected EventsPersistence eventsPersistence;
	@BeanReference(type = LabDetailsLocalService.class)
	protected LabDetailsLocalService labDetailsLocalService;
	@BeanReference(type = LabDetailsPersistence.class)
	protected LabDetailsPersistence labDetailsPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}