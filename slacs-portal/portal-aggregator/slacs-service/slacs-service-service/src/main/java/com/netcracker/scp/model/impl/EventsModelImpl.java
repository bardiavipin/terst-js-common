/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.netcracker.scp.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.netcracker.scp.model.Events;
import com.netcracker.scp.model.EventsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Events service. Represents a row in the &quot;Portlets_Events&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EventsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EventsImpl
 * @see Events
 * @see EventsModel
 * @generated
 */
@ProviderType
public class EventsModelImpl extends BaseModelImpl<Events>
	implements EventsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a events model instance should use the {@link Events} interface instead.
	 */
	public static final String TABLE_NAME = "Portlets_Events";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "eventId", Types.BIGINT },
			{ "labId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "startTime", Types.TIMESTAMP },
			{ "endTime", Types.TIMESTAMP },
			{ "activityType", Types.VARCHAR },
			{ "fullDay", Types.BOOLEAN },
			{ "portalUser", Types.VARCHAR },
			{ "portalPass", Types.VARCHAR },
			{ "ncUser", Types.VARCHAR },
			{ "ncPass", Types.VARCHAR },
			{ "status", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("labId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("activityType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fullDay", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("portalUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("portalPass", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncPass", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table Portlets_Events (uuid_ VARCHAR(75) null,eventId LONG not null primary key,labId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,title VARCHAR(75) null,description VARCHAR(75) null,startTime DATE null,endTime DATE null,activityType VARCHAR(75) null,fullDay BOOLEAN,portalUser VARCHAR(75) null,portalPass VARCHAR(75) null,ncUser VARCHAR(75) null,ncPass VARCHAR(75) null,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table Portlets_Events";
	public static final String ORDER_BY_JPQL = " ORDER BY events.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Portlets_Events.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.netcracker.scp.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.netcracker.scp.model.Events"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.netcracker.scp.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.netcracker.scp.model.Events"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.netcracker.scp.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.netcracker.scp.model.Events"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long LABID_COLUMN_BITMASK = 4L;
	public static final long STATUS_COLUMN_BITMASK = 8L;
	public static final long USERID_COLUMN_BITMASK = 16L;
	public static final long UUID_COLUMN_BITMASK = 32L;
	public static final long CREATEDATE_COLUMN_BITMASK = 64L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.netcracker.scp.service.util.ServiceProps.get(
				"lock.expiration.time.com.netcracker.scp.model.Events"));

	public EventsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Events.class;
	}

	@Override
	public String getModelClassName() {
		return Events.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("eventId", getEventId());
		attributes.put("labId", getLabId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("startTime", getStartTime());
		attributes.put("endTime", getEndTime());
		attributes.put("activityType", getActivityType());
		attributes.put("fullDay", getFullDay());
		attributes.put("portalUser", getPortalUser());
		attributes.put("portalPass", getPortalPass());
		attributes.put("ncUser", getNcUser());
		attributes.put("ncPass", getNcPass());
		attributes.put("status", getStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long eventId = (Long)attributes.get("eventId");

		if (eventId != null) {
			setEventId(eventId);
		}

		Long labId = (Long)attributes.get("labId");

		if (labId != null) {
			setLabId(labId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Date startTime = (Date)attributes.get("startTime");

		if (startTime != null) {
			setStartTime(startTime);
		}

		Date endTime = (Date)attributes.get("endTime");

		if (endTime != null) {
			setEndTime(endTime);
		}

		String activityType = (String)attributes.get("activityType");

		if (activityType != null) {
			setActivityType(activityType);
		}

		Boolean fullDay = (Boolean)attributes.get("fullDay");

		if (fullDay != null) {
			setFullDay(fullDay);
		}

		String portalUser = (String)attributes.get("portalUser");

		if (portalUser != null) {
			setPortalUser(portalUser);
		}

		String portalPass = (String)attributes.get("portalPass");

		if (portalPass != null) {
			setPortalPass(portalPass);
		}

		String ncUser = (String)attributes.get("ncUser");

		if (ncUser != null) {
			setNcUser(ncUser);
		}

		String ncPass = (String)attributes.get("ncPass");

		if (ncPass != null) {
			setNcPass(ncPass);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		_eventId = eventId;
	}

	@Override
	public long getLabId() {
		return _labId;
	}

	@Override
	public void setLabId(long labId) {
		_columnBitmask |= LABID_COLUMN_BITMASK;

		if (!_setOriginalLabId) {
			_setOriginalLabId = true;

			_originalLabId = _labId;
		}

		_labId = labId;
	}

	public long getOriginalLabId() {
		return _originalLabId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public Date getStartTime() {
		return _startTime;
	}

	@Override
	public void setStartTime(Date startTime) {
		_startTime = startTime;
	}

	@Override
	public Date getEndTime() {
		return _endTime;
	}

	@Override
	public void setEndTime(Date endTime) {
		_endTime = endTime;
	}

	@Override
	public String getActivityType() {
		if (_activityType == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityType;
		}
	}

	@Override
	public void setActivityType(String activityType) {
		_activityType = activityType;
	}

	@Override
	public boolean getFullDay() {
		return _fullDay;
	}

	@Override
	public boolean isFullDay() {
		return _fullDay;
	}

	@Override
	public void setFullDay(boolean fullDay) {
		_fullDay = fullDay;
	}

	@Override
	public String getPortalUser() {
		if (_portalUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _portalUser;
		}
	}

	@Override
	public void setPortalUser(String portalUser) {
		_portalUser = portalUser;
	}

	@Override
	public String getPortalPass() {
		if (_portalPass == null) {
			return StringPool.BLANK;
		}
		else {
			return _portalPass;
		}
	}

	@Override
	public void setPortalPass(String portalPass) {
		_portalPass = portalPass;
	}

	@Override
	public String getNcUser() {
		if (_ncUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _ncUser;
		}
	}

	@Override
	public void setNcUser(String ncUser) {
		_ncUser = ncUser;
	}

	@Override
	public String getNcPass() {
		if (_ncPass == null) {
			return StringPool.BLANK;
		}
		else {
			return _ncPass;
		}
	}

	@Override
	public void setNcPass(String ncPass) {
		_ncPass = ncPass;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Events.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Events.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Events toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Events)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EventsImpl eventsImpl = new EventsImpl();

		eventsImpl.setUuid(getUuid());
		eventsImpl.setEventId(getEventId());
		eventsImpl.setLabId(getLabId());
		eventsImpl.setGroupId(getGroupId());
		eventsImpl.setCompanyId(getCompanyId());
		eventsImpl.setUserId(getUserId());
		eventsImpl.setUserName(getUserName());
		eventsImpl.setCreateDate(getCreateDate());
		eventsImpl.setModifiedDate(getModifiedDate());
		eventsImpl.setTitle(getTitle());
		eventsImpl.setDescription(getDescription());
		eventsImpl.setStartTime(getStartTime());
		eventsImpl.setEndTime(getEndTime());
		eventsImpl.setActivityType(getActivityType());
		eventsImpl.setFullDay(getFullDay());
		eventsImpl.setPortalUser(getPortalUser());
		eventsImpl.setPortalPass(getPortalPass());
		eventsImpl.setNcUser(getNcUser());
		eventsImpl.setNcPass(getNcPass());
		eventsImpl.setStatus(getStatus());

		eventsImpl.resetOriginalValues();

		return eventsImpl;
	}

	@Override
	public int compareTo(Events events) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), events.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Events)) {
			return false;
		}

		Events events = (Events)obj;

		long primaryKey = events.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EventsModelImpl eventsModelImpl = this;

		eventsModelImpl._originalUuid = eventsModelImpl._uuid;

		eventsModelImpl._originalLabId = eventsModelImpl._labId;

		eventsModelImpl._setOriginalLabId = false;

		eventsModelImpl._originalGroupId = eventsModelImpl._groupId;

		eventsModelImpl._setOriginalGroupId = false;

		eventsModelImpl._originalCompanyId = eventsModelImpl._companyId;

		eventsModelImpl._setOriginalCompanyId = false;

		eventsModelImpl._originalUserId = eventsModelImpl._userId;

		eventsModelImpl._setOriginalUserId = false;

		eventsModelImpl._setModifiedDate = false;

		eventsModelImpl._originalStatus = eventsModelImpl._status;

		eventsModelImpl._setOriginalStatus = false;

		eventsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Events> toCacheModel() {
		EventsCacheModel eventsCacheModel = new EventsCacheModel();

		eventsCacheModel.uuid = getUuid();

		String uuid = eventsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			eventsCacheModel.uuid = null;
		}

		eventsCacheModel.eventId = getEventId();

		eventsCacheModel.labId = getLabId();

		eventsCacheModel.groupId = getGroupId();

		eventsCacheModel.companyId = getCompanyId();

		eventsCacheModel.userId = getUserId();

		eventsCacheModel.userName = getUserName();

		String userName = eventsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			eventsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			eventsCacheModel.createDate = createDate.getTime();
		}
		else {
			eventsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			eventsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			eventsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		eventsCacheModel.title = getTitle();

		String title = eventsCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			eventsCacheModel.title = null;
		}

		eventsCacheModel.description = getDescription();

		String description = eventsCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			eventsCacheModel.description = null;
		}

		Date startTime = getStartTime();

		if (startTime != null) {
			eventsCacheModel.startTime = startTime.getTime();
		}
		else {
			eventsCacheModel.startTime = Long.MIN_VALUE;
		}

		Date endTime = getEndTime();

		if (endTime != null) {
			eventsCacheModel.endTime = endTime.getTime();
		}
		else {
			eventsCacheModel.endTime = Long.MIN_VALUE;
		}

		eventsCacheModel.activityType = getActivityType();

		String activityType = eventsCacheModel.activityType;

		if ((activityType != null) && (activityType.length() == 0)) {
			eventsCacheModel.activityType = null;
		}

		eventsCacheModel.fullDay = getFullDay();

		eventsCacheModel.portalUser = getPortalUser();

		String portalUser = eventsCacheModel.portalUser;

		if ((portalUser != null) && (portalUser.length() == 0)) {
			eventsCacheModel.portalUser = null;
		}

		eventsCacheModel.portalPass = getPortalPass();

		String portalPass = eventsCacheModel.portalPass;

		if ((portalPass != null) && (portalPass.length() == 0)) {
			eventsCacheModel.portalPass = null;
		}

		eventsCacheModel.ncUser = getNcUser();

		String ncUser = eventsCacheModel.ncUser;

		if ((ncUser != null) && (ncUser.length() == 0)) {
			eventsCacheModel.ncUser = null;
		}

		eventsCacheModel.ncPass = getNcPass();

		String ncPass = eventsCacheModel.ncPass;

		if ((ncPass != null) && (ncPass.length() == 0)) {
			eventsCacheModel.ncPass = null;
		}

		eventsCacheModel.status = getStatus();

		return eventsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", eventId=");
		sb.append(getEventId());
		sb.append(", labId=");
		sb.append(getLabId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", startTime=");
		sb.append(getStartTime());
		sb.append(", endTime=");
		sb.append(getEndTime());
		sb.append(", activityType=");
		sb.append(getActivityType());
		sb.append(", fullDay=");
		sb.append(getFullDay());
		sb.append(", portalUser=");
		sb.append(getPortalUser());
		sb.append(", portalPass=");
		sb.append(getPortalPass());
		sb.append(", ncUser=");
		sb.append(getNcUser());
		sb.append(", ncPass=");
		sb.append(getNcPass());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("com.netcracker.scp.model.Events");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventId</column-name><column-value><![CDATA[");
		sb.append(getEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>labId</column-name><column-value><![CDATA[");
		sb.append(getLabId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startTime</column-name><column-value><![CDATA[");
		sb.append(getStartTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endTime</column-name><column-value><![CDATA[");
		sb.append(getEndTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityType</column-name><column-value><![CDATA[");
		sb.append(getActivityType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fullDay</column-name><column-value><![CDATA[");
		sb.append(getFullDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portalUser</column-name><column-value><![CDATA[");
		sb.append(getPortalUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portalPass</column-name><column-value><![CDATA[");
		sb.append(getPortalPass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ncUser</column-name><column-value><![CDATA[");
		sb.append(getNcUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ncPass</column-name><column-value><![CDATA[");
		sb.append(getNcPass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Events.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Events.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _eventId;
	private long _labId;
	private long _originalLabId;
	private boolean _setOriginalLabId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _title;
	private String _description;
	private Date _startTime;
	private Date _endTime;
	private String _activityType;
	private boolean _fullDay;
	private String _portalUser;
	private String _portalPass;
	private String _ncUser;
	private String _ncPass;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _columnBitmask;
	private Events _escapedModel;
}