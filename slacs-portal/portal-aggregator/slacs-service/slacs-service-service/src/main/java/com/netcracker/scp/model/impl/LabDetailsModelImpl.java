/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.netcracker.scp.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.netcracker.scp.model.LabDetails;
import com.netcracker.scp.model.LabDetailsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LabDetails service. Represents a row in the &quot;Portlets_LabDetails&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LabDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LabDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LabDetailsImpl
 * @see LabDetails
 * @see LabDetailsModel
 * @generated
 */
@ProviderType
public class LabDetailsModelImpl extends BaseModelImpl<LabDetails>
	implements LabDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lab details model instance should use the {@link LabDetails} interface instead.
	 */
	public static final String TABLE_NAME = "Portlets_LabDetails";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "labId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "portalUrl", Types.VARCHAR },
			{ "ncUrl", Types.VARCHAR },
			{ "otherUrl", Types.VARCHAR },
			{ "vimUser", Types.VARCHAR },
			{ "vimPass", Types.VARCHAR },
			{ "sdnUser", Types.VARCHAR },
			{ "sdnPass", Types.VARCHAR },
			{ "bassLink", Types.VARCHAR },
			{ "status", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("portalUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vimUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vimPass", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sdnUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sdnPass", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bassLink", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table Portlets_LabDetails (uuid_ VARCHAR(75) null,labId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,title VARCHAR(75) null,description VARCHAR(75) null,portalUrl VARCHAR(75) null,ncUrl VARCHAR(75) null,otherUrl VARCHAR(75) null,vimUser VARCHAR(75) null,vimPass VARCHAR(75) null,sdnUser VARCHAR(75) null,sdnPass VARCHAR(75) null,bassLink VARCHAR(75) null,status BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table Portlets_LabDetails";
	public static final String ORDER_BY_JPQL = " ORDER BY labDetails.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Portlets_LabDetails.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.netcracker.scp.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.netcracker.scp.model.LabDetails"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.netcracker.scp.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.netcracker.scp.model.LabDetails"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.netcracker.scp.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.netcracker.scp.model.LabDetails"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long STATUS_COLUMN_BITMASK = 4L;
	public static final long USERID_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long CREATEDATE_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.netcracker.scp.service.util.ServiceProps.get(
				"lock.expiration.time.com.netcracker.scp.model.LabDetails"));

	public LabDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _labId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLabId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _labId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LabDetails.class;
	}

	@Override
	public String getModelClassName() {
		return LabDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("labId", getLabId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("portalUrl", getPortalUrl());
		attributes.put("ncUrl", getNcUrl());
		attributes.put("otherUrl", getOtherUrl());
		attributes.put("vimUser", getVimUser());
		attributes.put("vimPass", getVimPass());
		attributes.put("sdnUser", getSdnUser());
		attributes.put("sdnPass", getSdnPass());
		attributes.put("bassLink", getBassLink());
		attributes.put("status", getStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long labId = (Long)attributes.get("labId");

		if (labId != null) {
			setLabId(labId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String portalUrl = (String)attributes.get("portalUrl");

		if (portalUrl != null) {
			setPortalUrl(portalUrl);
		}

		String ncUrl = (String)attributes.get("ncUrl");

		if (ncUrl != null) {
			setNcUrl(ncUrl);
		}

		String otherUrl = (String)attributes.get("otherUrl");

		if (otherUrl != null) {
			setOtherUrl(otherUrl);
		}

		String vimUser = (String)attributes.get("vimUser");

		if (vimUser != null) {
			setVimUser(vimUser);
		}

		String vimPass = (String)attributes.get("vimPass");

		if (vimPass != null) {
			setVimPass(vimPass);
		}

		String sdnUser = (String)attributes.get("sdnUser");

		if (sdnUser != null) {
			setSdnUser(sdnUser);
		}

		String sdnPass = (String)attributes.get("sdnPass");

		if (sdnPass != null) {
			setSdnPass(sdnPass);
		}

		String bassLink = (String)attributes.get("bassLink");

		if (bassLink != null) {
			setBassLink(bassLink);
		}

		Boolean status = (Boolean)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getLabId() {
		return _labId;
	}

	@Override
	public void setLabId(long labId) {
		_labId = labId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getPortalUrl() {
		if (_portalUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _portalUrl;
		}
	}

	@Override
	public void setPortalUrl(String portalUrl) {
		_portalUrl = portalUrl;
	}

	@Override
	public String getNcUrl() {
		if (_ncUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _ncUrl;
		}
	}

	@Override
	public void setNcUrl(String ncUrl) {
		_ncUrl = ncUrl;
	}

	@Override
	public String getOtherUrl() {
		if (_otherUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _otherUrl;
		}
	}

	@Override
	public void setOtherUrl(String otherUrl) {
		_otherUrl = otherUrl;
	}

	@Override
	public String getVimUser() {
		if (_vimUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _vimUser;
		}
	}

	@Override
	public void setVimUser(String vimUser) {
		_vimUser = vimUser;
	}

	@Override
	public String getVimPass() {
		if (_vimPass == null) {
			return StringPool.BLANK;
		}
		else {
			return _vimPass;
		}
	}

	@Override
	public void setVimPass(String vimPass) {
		_vimPass = vimPass;
	}

	@Override
	public String getSdnUser() {
		if (_sdnUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _sdnUser;
		}
	}

	@Override
	public void setSdnUser(String sdnUser) {
		_sdnUser = sdnUser;
	}

	@Override
	public String getSdnPass() {
		if (_sdnPass == null) {
			return StringPool.BLANK;
		}
		else {
			return _sdnPass;
		}
	}

	@Override
	public void setSdnPass(String sdnPass) {
		_sdnPass = sdnPass;
	}

	@Override
	public String getBassLink() {
		if (_bassLink == null) {
			return StringPool.BLANK;
		}
		else {
			return _bassLink;
		}
	}

	@Override
	public void setBassLink(String bassLink) {
		_bassLink = bassLink;
	}

	@Override
	public boolean getStatus() {
		return _status;
	}

	@Override
	public boolean isStatus() {
		return _status;
	}

	@Override
	public void setStatus(boolean status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public boolean getOriginalStatus() {
		return _originalStatus;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				LabDetails.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LabDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LabDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LabDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LabDetailsImpl labDetailsImpl = new LabDetailsImpl();

		labDetailsImpl.setUuid(getUuid());
		labDetailsImpl.setLabId(getLabId());
		labDetailsImpl.setGroupId(getGroupId());
		labDetailsImpl.setCompanyId(getCompanyId());
		labDetailsImpl.setUserId(getUserId());
		labDetailsImpl.setUserName(getUserName());
		labDetailsImpl.setCreateDate(getCreateDate());
		labDetailsImpl.setModifiedDate(getModifiedDate());
		labDetailsImpl.setTitle(getTitle());
		labDetailsImpl.setDescription(getDescription());
		labDetailsImpl.setPortalUrl(getPortalUrl());
		labDetailsImpl.setNcUrl(getNcUrl());
		labDetailsImpl.setOtherUrl(getOtherUrl());
		labDetailsImpl.setVimUser(getVimUser());
		labDetailsImpl.setVimPass(getVimPass());
		labDetailsImpl.setSdnUser(getSdnUser());
		labDetailsImpl.setSdnPass(getSdnPass());
		labDetailsImpl.setBassLink(getBassLink());
		labDetailsImpl.setStatus(getStatus());

		labDetailsImpl.resetOriginalValues();

		return labDetailsImpl;
	}

	@Override
	public int compareTo(LabDetails labDetails) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), labDetails.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LabDetails)) {
			return false;
		}

		LabDetails labDetails = (LabDetails)obj;

		long primaryKey = labDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LabDetailsModelImpl labDetailsModelImpl = this;

		labDetailsModelImpl._originalUuid = labDetailsModelImpl._uuid;

		labDetailsModelImpl._originalGroupId = labDetailsModelImpl._groupId;

		labDetailsModelImpl._setOriginalGroupId = false;

		labDetailsModelImpl._originalCompanyId = labDetailsModelImpl._companyId;

		labDetailsModelImpl._setOriginalCompanyId = false;

		labDetailsModelImpl._originalUserId = labDetailsModelImpl._userId;

		labDetailsModelImpl._setOriginalUserId = false;

		labDetailsModelImpl._setModifiedDate = false;

		labDetailsModelImpl._originalStatus = labDetailsModelImpl._status;

		labDetailsModelImpl._setOriginalStatus = false;

		labDetailsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LabDetails> toCacheModel() {
		LabDetailsCacheModel labDetailsCacheModel = new LabDetailsCacheModel();

		labDetailsCacheModel.uuid = getUuid();

		String uuid = labDetailsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			labDetailsCacheModel.uuid = null;
		}

		labDetailsCacheModel.labId = getLabId();

		labDetailsCacheModel.groupId = getGroupId();

		labDetailsCacheModel.companyId = getCompanyId();

		labDetailsCacheModel.userId = getUserId();

		labDetailsCacheModel.userName = getUserName();

		String userName = labDetailsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			labDetailsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			labDetailsCacheModel.createDate = createDate.getTime();
		}
		else {
			labDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			labDetailsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			labDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		labDetailsCacheModel.title = getTitle();

		String title = labDetailsCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			labDetailsCacheModel.title = null;
		}

		labDetailsCacheModel.description = getDescription();

		String description = labDetailsCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			labDetailsCacheModel.description = null;
		}

		labDetailsCacheModel.portalUrl = getPortalUrl();

		String portalUrl = labDetailsCacheModel.portalUrl;

		if ((portalUrl != null) && (portalUrl.length() == 0)) {
			labDetailsCacheModel.portalUrl = null;
		}

		labDetailsCacheModel.ncUrl = getNcUrl();

		String ncUrl = labDetailsCacheModel.ncUrl;

		if ((ncUrl != null) && (ncUrl.length() == 0)) {
			labDetailsCacheModel.ncUrl = null;
		}

		labDetailsCacheModel.otherUrl = getOtherUrl();

		String otherUrl = labDetailsCacheModel.otherUrl;

		if ((otherUrl != null) && (otherUrl.length() == 0)) {
			labDetailsCacheModel.otherUrl = null;
		}

		labDetailsCacheModel.vimUser = getVimUser();

		String vimUser = labDetailsCacheModel.vimUser;

		if ((vimUser != null) && (vimUser.length() == 0)) {
			labDetailsCacheModel.vimUser = null;
		}

		labDetailsCacheModel.vimPass = getVimPass();

		String vimPass = labDetailsCacheModel.vimPass;

		if ((vimPass != null) && (vimPass.length() == 0)) {
			labDetailsCacheModel.vimPass = null;
		}

		labDetailsCacheModel.sdnUser = getSdnUser();

		String sdnUser = labDetailsCacheModel.sdnUser;

		if ((sdnUser != null) && (sdnUser.length() == 0)) {
			labDetailsCacheModel.sdnUser = null;
		}

		labDetailsCacheModel.sdnPass = getSdnPass();

		String sdnPass = labDetailsCacheModel.sdnPass;

		if ((sdnPass != null) && (sdnPass.length() == 0)) {
			labDetailsCacheModel.sdnPass = null;
		}

		labDetailsCacheModel.bassLink = getBassLink();

		String bassLink = labDetailsCacheModel.bassLink;

		if ((bassLink != null) && (bassLink.length() == 0)) {
			labDetailsCacheModel.bassLink = null;
		}

		labDetailsCacheModel.status = getStatus();

		return labDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", labId=");
		sb.append(getLabId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", portalUrl=");
		sb.append(getPortalUrl());
		sb.append(", ncUrl=");
		sb.append(getNcUrl());
		sb.append(", otherUrl=");
		sb.append(getOtherUrl());
		sb.append(", vimUser=");
		sb.append(getVimUser());
		sb.append(", vimPass=");
		sb.append(getVimPass());
		sb.append(", sdnUser=");
		sb.append(getSdnUser());
		sb.append(", sdnPass=");
		sb.append(getSdnPass());
		sb.append(", bassLink=");
		sb.append(getBassLink());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("com.netcracker.scp.model.LabDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>labId</column-name><column-value><![CDATA[");
		sb.append(getLabId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portalUrl</column-name><column-value><![CDATA[");
		sb.append(getPortalUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ncUrl</column-name><column-value><![CDATA[");
		sb.append(getNcUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherUrl</column-name><column-value><![CDATA[");
		sb.append(getOtherUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vimUser</column-name><column-value><![CDATA[");
		sb.append(getVimUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vimPass</column-name><column-value><![CDATA[");
		sb.append(getVimPass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sdnUser</column-name><column-value><![CDATA[");
		sb.append(getSdnUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sdnPass</column-name><column-value><![CDATA[");
		sb.append(getSdnPass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bassLink</column-name><column-value><![CDATA[");
		sb.append(getBassLink());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LabDetails.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LabDetails.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _labId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _title;
	private String _description;
	private String _portalUrl;
	private String _ncUrl;
	private String _otherUrl;
	private String _vimUser;
	private String _vimPass;
	private String _sdnUser;
	private String _sdnPass;
	private String _bassLink;
	private boolean _status;
	private boolean _originalStatus;
	private boolean _setOriginalStatus;
	private long _columnBitmask;
	private LabDetails _escapedModel;
}